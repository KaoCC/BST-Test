module &_tmp_cloc7531_kernel_opt_bc:1:0:$full:$large:$default;
extension "amd:gcn";
extension "IMAGE";

decl prog function &abort()();

prog kernel &__OpenCL_Find_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %node,
	kernarg_u64 %out,
	kernarg_u64 %key_list)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_Find_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1024";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:node:u8:1:1:96:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "pointer:out:u8:1:1:112:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "pointer:key_list:u32:1:1:128:uav:7:4:RW:0:0:0";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:0";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:void*";
	pragma "AMD RTI", "reflection:7:void*";
	pragma "AMD RTI", "reflection:8:int*";
	pragma "AMD RTI", "ARGEND:__OpenCL_Find_kernel";

@__OpenCL_Find_kernel_entry:
	// BB#0:
	ld_kernarg_align(8)_width(all)_u64	$d1, [%node];
	nullptr_u64	$d0;
	cmp_eq_b1_s64	$c0, $d1, $d0;
	cbr_b1	$c0, @BB0_8;
	// BB#1:
	ld_kernarg_align(8)_width(all)_u64	$d3, [%key_list];
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d2, [%__global_offset_0];
	add_u64	$d0, $d0, $d2;
	shl_u64	$d0, $d0, 32;
	shr_s64	$d0, $d0, 32;
	mov_b64	$d1, $d1;
	nullptr_u64	$d2;
	shl_u64	$d4, $d0, 2;
	add_u64	$d3, $d3, $d4;
	br	@BB0_2;

@BB0_4:
	add_u64	$d1, $d1, 16;
	ld_align(8)_u64	$d1, [$d1];

@BB0_2:
	cmp_eq_b1_s64	$c0, $d1, $d2;
	cbr_b1	$c0, @BB0_7;
	// BB#3:
	ld_global_align(4)_u32	$s0, [$d3];
	ld_align(4)_u32	$s1, [$d1];
	cmp_gt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_4;
	// BB#5:
	cmp_ge_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_7;
	// BB#6:
	add_u64	$d1, $d1, 8;
	ld_align(8)_u64	$d1, [$d1];
	br	@BB0_2;

@BB0_7:
	ld_kernarg_align(8)_width(all)_u64	$d2, [%out];
	shl_u64	$d0, $d0, 3;
	add_u64	$d0, $d2, $d0;
	st_global_align(8)_u64	$d1, [$d0];

@BB0_8:
	ret;
};

prog kernel &__OpenCL_Insert_kernel(
	kernarg_u64 %__global_offset_0,
	kernarg_u64 %__global_offset_1,
	kernarg_u64 %__global_offset_2,
	kernarg_u64 %__printf_buffer,
	kernarg_u64 %__vqueue_pointer,
	kernarg_u64 %__aqlwrap_pointer,
	kernarg_u64 %rootNode,
	kernarg_u64 %dataNode)
{
	pragma "AMD RTI", "ARGSTART:__OpenCL_Insert_kernel";
	pragma "AMD RTI", "version:3:1:104";
	pragma "AMD RTI", "device:generic";
	pragma "AMD RTI", "uniqueid:1025";
	pragma "AMD RTI", "memory:private:0";
	pragma "AMD RTI", "memory:region:0";
	pragma "AMD RTI", "memory:local:0";
	pragma "AMD RTI", "value:__global_offset_0:u64:1:1:0";
	pragma "AMD RTI", "value:__global_offset_1:u64:1:1:16";
	pragma "AMD RTI", "value:__global_offset_2:u64:1:1:32";
	pragma "AMD RTI", "pointer:__printf_buffer:u8:1:1:48:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "value:__vqueue_pointer:u64:1:1:64";
	pragma "AMD RTI", "value:__aqlwrap_pointer:u64:1:1:80";
	pragma "AMD RTI", "pointer:rootNode:u8:1:1:96:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "pointer:dataNode:u8:1:1:112:uav:7:1:RW:0:0:0";
	pragma "AMD RTI", "function:1:0";
	pragma "AMD RTI", "memory:64bitABI";
	pragma "AMD RTI", "privateid:8";
	pragma "AMD RTI", "enqueue_kernel:0";
	pragma "AMD RTI", "kernel_index:1";
	pragma "AMD RTI", "reflection:0:size_t";
	pragma "AMD RTI", "reflection:1:size_t";
	pragma "AMD RTI", "reflection:2:size_t";
	pragma "AMD RTI", "reflection:3:size_t";
	pragma "AMD RTI", "reflection:4:size_t";
	pragma "AMD RTI", "reflection:5:size_t";
	pragma "AMD RTI", "reflection:6:void*";
	pragma "AMD RTI", "reflection:7:void*";
	pragma "AMD RTI", "ARGEND:__OpenCL_Insert_kernel";

@__OpenCL_Insert_kernel_entry:
	// BB#0:
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d0, $s0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%__global_offset_0];
	add_u64	$d0, $d0, $d1;
	shl_u64	$d0, $d0, 32;
	shr_s64	$d0, $d0, 32;
	shl_u64	$d0, $d0, 3;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%dataNode];
	add_u64	$d0, $d1, $d0;
	ld_kernarg_align(8)_width(all)_u64	$d1, [%rootNode];
	mov_b64	$d2, $d1;
	nullptr_u64	$d1;
	br	@BB1_1;

@BB1_3:
	add_u64	$d2, $d2, 16;
	ld_align(8)_u64	$d2, [$d2];

@BB1_1:
	cmp_eq_b1_s64	$c0, $d2, $d1;
	cbr_b1	$c0, @BB1_6;
	// BB#2:
	ld_align(4)_u32	$s0, [$d2];
	ld_global_align(8)_u64	$d3, [$d0];
	ld_align(4)_u32	$s1, [$d3];
	cmp_gt_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB1_3;
	// BB#4:
	cmp_ge_b1_s32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB1_1;
	// BB#5:
	add_u64	$d2, $d2, 8;
	ld_align(8)_u64	$d2, [$d2];
	br	@BB1_1;

@BB1_6:
	barrier;
	ret;
};
